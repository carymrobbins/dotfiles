#!/bin/bash

set -e

usage() {
  echo "Usage: $0 [--verbose] [--simple] <base_rev>"
  echo
  echo "Flags:"
  echo "  --verbose       Output debugging info"
  echo "  --simple        Only output suggested commands"
  echo "  --squash        Squash commits instead of fixup"
  echo "  --exec          Execute suggested commands"
}

text_bold="$(tput bold)"
text_reset="$(tput sgr0)"
text_red="$(tput setaf 1)"
text_yellow="$(tput setaf 3)"
text_magenta="$(tput setaf 5)"

for arg in "$@"; do
  case "$arg" in
    --help|-h) usage; exit ;;
    --verbose) verbose=1 ;;
    --simple) simple=1 ;;
    --squash) squash=1 ;;
    --exec) execute=1 ;;
    *)
      if [ -n "$base_rev" ]; then
        >&2 echo "${text_red}Unexpected argument: $arg"
        >&2 usage
        exit 1
      fi
      base_rev=$arg
      ;;
  esac
done

if [ -n "$squash" ]; then
  squash_type="--squash"
else
  squash_type="--fixup"
fi

log() {
  if [ -n "$verbose" ]; then
    >&2 echo "${text_yellow}LOG:" "$@" "${text_reset}"
  fi
}

default_base_rev="origin/master"
if [ -z "$base_rev" ]; then
  read -p "No revision given, use ${default_base_rev}? [y/N] " -n 1 -r
  echo
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    base_rev="$default_base_rev"
  else
    >&2 echo "Exiting per user request"
    exit 1
  fi
fi

# TODO: Is there a better way to ensure a revision exists?
if [ -z "$(git show "$base_rev" | head -n1)" ]; then
  >&2 echo "Revision does not exist: $base_rev"
  exit 1
fi

lines_to_array() {
  local varname="$1"
  shift
  eval "${varname}=()"
  while IFS= read -r -d $'\n'; do
    eval "${varname}+=(\"$REPLY\")"
  done < <("$@")
}

lines_to_array dirty_files \
  git diff-files --name-only

log "Dirty files: ${dirty_files[@]}"

if [ "${#dirty_files[@]}" -eq 0 ]; then
  >&2 echo "${text_red}No dirty files found.${text_reset}"
  exit 1
fi

lines_to_array revs \
  git rev-list "${base_rev}.."

log "Revisions found since $base_rev: ${revs[@]}"

array_to_lines() {
  local varname="$1"
  eval "printf '%s\n' \"\${${varname}[@]}\""
}

array_intersection() {
  comm -12 <(array_to_lines "$1" | sort) <(array_to_lines "$2" | sort)
}

files_suggested=()
intersection=()
to_exec=()

for rev in "${revs[@]}"; do
  log "Checking revision: $rev"
  lines_to_array files_found \
    git diff-tree "$rev" --name-only --no-commit-id -r -- "${dirty_files[@]}"
  if [ "${#files_found[@]}" -gt 0 ]; then
    log "Files found: ${files_found[@]}"

    lines_to_array intersection \
      array_intersection files_suggested files_found

    if [ "${#intersection[@]}" -gt 0 ]; then
      >&2 echo "${text_red}WARNING: Files below have already been suggested, proceed with caution!"
      for f in "${intersection[@]}"; do
        >&2 echo "  - $f"
      done
      >&2 printf "${text_reset}"
      no_exec_due_to_warn=1
    fi

    [ -n "$simple" ] || printf '%s %s\n' \
      "${text_bold}${text_magenta}# Rebase suggestion:${text_reset}" \
      "${text_magenta}$(git show -s --format=%s "$rev")${text_reset}"
    # Using ';' as a delimiter
    to_exec+=(git add "${files_found[@]}" ';')
    echo "  git add ${files_found[@]}"
    to_exec+=(git commit "$squash_type" "$rev" ';')
    echo "  git commit $squash_type $rev"
    files_suggested+=("${files_found[@]}")
  fi
done

[ -n "$simple" ] || echo "${text_bold}${text_magenta}# To squash changes:${text_reset}"
to_exec+=(git rebase -i "$base_rev" --autosquash ';')
echo "  git rebase -i $base_rev --autosquash"

if [ -n "$execute" ]; then
  if [ -n "$no_exec_due_to_warn" ]; then
    >&2 echo "Cannot execute due to warnings"
    exit 1
  fi
  cmd=()
  for arg in "${to_exec[@]}"; do
    if [ "$arg" == ';' ]; then
      (set -x ; "${cmd[@]}")
      cmd=()
    else
      cmd+=("$arg")
    fi
  done
fi
