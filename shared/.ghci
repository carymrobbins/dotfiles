-- Dependencies:
-- pacman -S haskell-split haskell-pretty-show haskell-hscolour
-- or
-- stack build split pretty-show hscolour

-- Allow these packages to be used even if they are not defined in
-- the cabal file
:set -package bytestring
:set -package hscolour
:set -package parsec
:set -package pretty-show
:set -package split
:set -package time

-- Just in case we're dealing with NoImplicitPrelude.
:m + Prelude

:def logoprompt (\_ -> pure ":set prompt \"\x1b[35m\xe677\x1b[0m \"\n:set prompt-cont \"\x1b[34m\xe677 |\x1b[0m \"")

:def lambdaprompt (\_ -> pure ":set prompt \"\x1b[35mλ\x1b[0m \"\n:set prompt-cont \"\x1b[34mλ |\x1b[0m \"")

:def blog (\_ -> pure ":set prompt \"\x1b[35m\\n>\x1b[0m \"\n:set prompt-cont \"\x1b[34m  \x1b[0m \"")

-- Purple for normal prompt
-- :set prompt "\x1b[35m\xe677\x1b[0m "
-- :set prompt "\x1b[35m⋙\x1b[0m "
:set prompt "\x1b[35mℋ \x1b[0m "

-- Blue for continuation `:{` prompt
-- :set prompt-cont "\x1b[34m\xe677 ⋮\x1b[0m "
-- :set prompt-cont "\x1b[34m⋙ ⋮\x1b[0m "
:set prompt-cont "\x1b[34mℋ ⋮\x1b[0m "

-- :set prompt "\x1b[35mλ\x1b[0m "

-- Default imports
:m + Control.Applicative
:m + Control.Monad
:m + Data.Coerce
:m + Data.Monoid
:m + Data.Proxy
:m + Data.String
:m + Data.Time
:m + Data.Typeable

import Data.ByteString (ByteString)
import Data.Text (Text)
import GHC.Generics (Generic)

import qualified Control.Monad.Fail
import qualified Data.ByteString
import qualified Data.ByteString.Char8 as Char8
import qualified Data.ByteString.Lazy
import qualified Data.ByteString.Lazy as Lazy (ByteString)
import qualified Data.ByteString.Lazy.Char8 as Lazy.Char8
import qualified Data.Char as Char
import qualified Data.List as List
import qualified Data.List.Split
import qualified Data.Map.Strict as Map
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Data.Typeable
import qualified GHC.Generics
import qualified GHC.TypeLits

-- Needed for some stuff later in this file.
:set -XDerivingStrategies
:set -XFlexibleContexts
:set -XGeneralizedNewtypeDeriving
:set -XTypeApplications

-- Load "default" extensions with a macro
:def xd (\_ -> do { home <- System.Directory.getHomeDirectory ; Debug.Trace.traceId . unlines . map (":set -X" <>) . lines <$> readFile (home <> "/.ghci-default-extensions") })

-- START HASKELL CODE
:{

-- Pretty print a number with commas
pp :: Show a => a -> IO ()
pp x = putStrLn $ h ++ t'
  where
  --n = Numeric.showFFloat ()
  sp = break (== '.') $ show x
  h = reverse (List.intercalate "," $ Data.List.Split.chunksOf 3 $ reverse $ fst sp)
  t' = snd sp

removeCRsFromFile :: FilePath -> IO ()
removeCRsFromFile file = do
  c <- readFile file
  length c `seq` writeFile file $ filter (/= '\r') c

takeWhileM :: Monad m => (a -> Bool) -> [m a] -> m [a]
takeWhileM p (ma : mas) = do
    a <- ma
    if p a
      then liftM (a :) $ takeWhileM p mas
      else pure []
takeWhileM _ _ = pure []

getLinesWhile :: (String -> Bool) -> IO String
getLinesWhile p = liftM unlines $ takeWhileM p (repeat getLine)

getLines :: IO String
getLines = getLinesWhile (/="\"\"\"")

-- Pretty printing with :cp and :ncp
-- pacman -S haskell-pretty-show haskell-hscolour
-- or
-- stack build pretty-show hscolour
--
-- Collapsed to one line to make it easier to paste in if need be.
colorPrint = System.IO.putStrLn GHC.Base.. Language.Haskell.HsColour.hscolour Language.Haskell.HsColour.TTY Language.Haskell.HsColour.Colourise.defaultColourPrefs False False "" False GHC.Base.. Text.Show.Pretty.ppShow 

-- Yeah I did it, so what. Many are partial but whatever.
instance Num Char where
  x + y = Char.chr $ Char.ord x + Char.ord y
  x - y = Char.chr $ Char.ord x - Char.ord y
  x * y = Char.chr $ Char.ord x * Char.ord y
  abs = Char.chr . abs . Char.ord
  signum = Char.chr . signum . Char.ord
  fromInteger = Char.chr . fromInteger

instance Real Char where
  toRational = toRational . Char.ord

instance Integral Char where
  quotRem n d = let (q, r) = Char.ord n `quotRem` Char.ord d in (Char.chr q, Char.chr r)
  toInteger = toInteger . Char.ord

-------------------------------------------------
-- TimeLit stuff --------------------------------
-------------------------------------------------

newtype AltEither e a = AltEither { unAltEither :: Either e a }
  deriving newtype (Functor, Applicative, Monad)

instance (IsString e) => Control.Monad.Fail.MonadFail (AltEither e) where
  fail s = AltEither $ Left $ fromString s

instance (IsString e) => Alternative (AltEither e) where
  empty = fail "empty"
  x@(AltEither x') <|> y = case x' of
    Left _ -> y
    Right _ -> x

newtype TimeLit = TimeLit { unTimeLit :: DiffTime }
  deriving newtype (Num)

-- Helper to specialize the type of an expression.
timeExpr :: TimeLit -> TimeLit
timeExpr = id

instance Show TimeLit where
  show x = show h ++ ":" ++ f02 m ++ ":" ++ f02 s
    where
    (h, m, s) = timeLitToTuple x
    f02 n = reverse $ take 2 $ reverse $ "0" ++ show n

instance IsString TimeLit where
  fromString s =
    either error id $ unAltEither $
          AltEither (parseTimeLit s)
      <|> AltEither (parseTimeLit (s <> ":0"))
      <|> AltEither (Left $ "Invalid TimeLit: " <> show s)

-- A sad way of converting DiffTime to seconds
diffTimeToSeconds :: DiffTime -> Int
diffTimeToSeconds dt = case reads @Int $ show dt of
  [(x, "s")] -> x
  _ -> error $ "Invalid Int from DiffTime: " ++ show dt

timeLitToTuple :: TimeLit -> (Int, Int, Int)
timeLitToTuple (TimeLit inp) =
  let initial   = diffTimeToSeconds inp
      (h, rest) = initial `divMod` 3600
      (m, s)    = rest    `divMod`   60
  in (h, m, s)

parseTimeLit :: String -> Either String TimeLit
parseTimeLit inp = case Text.Parsec.parse p srcName inp of
  Right x -> Right x
  Left e -> Left $ unlines
    [ "Failed to parse TimeLit: " ++ show inp
    , "Error: " ++ show e
    ]
  where
  srcName = ""
  integer = read @Integer <$> Text.Parsec.many1 Text.Parsec.digit
  colon = void $ Text.Parsec.char ':'
  (<?>) = (Text.Parsec.<?>)
  p = do
    h <- integer <?> "hour"
    _ <- colon <?> "colon after hour"
    m <- integer <?> "minute"
    when (m > 59) $ fail $ "Minute must be 0-59, got: " ++ show m
    _ <- colon <?> "colon after minute"
    s <- integer <?> "second"
    when (s > 59) $ fail $ "Second must be 0-59, got: " ++ show s
    Text.Parsec.eof
    pure $ fromInteger $ h * 3600 + m * 60 + s

-- h:mm:ss TimeLit
t :: String -> TimeLit
t = either error id . parseTimeLit

-- h:mm TimeLit
th :: String -> TimeLit
th = either error id . parseTimeLit . (++ ":0")

-- m:ss TimeLit
tm :: String -> TimeLit
tm = either error id . parseTimeLit . ("0:" ++)
:}
-- END HASKELL CODE

-- Use cp/ncp to turn on/off color printing
:def cp (\_ -> pure ":set -interactive-print=colorPrint")
:def ncp (\_ -> pure ":set -interactive-print=print")
-- color printing on by default
:cp
