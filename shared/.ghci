-- Dependencies:
-- pacman -S haskell-split haskell-pretty-show haskell-hscolour
-- or
-- stack build split pretty-show hscolour

-- Allow these packages to be used even if they are not defined in
-- the cabal file
:set -package split
:set -package pretty-show
:set -package hscolour
:set -package parsec

-- Purple for normal prompt
:set prompt "\x1b[35m\xe677\x1b[0m "

-- Blue for continuation `:{` prompt
:set prompt-cont "\x1b[34m\xe677 |\x1b[0m "
-- :set prompt "\x1b[35mλ\x1b[0m "

:def lambdaprompt (\_ -> return $ ":set prompt \"\x1b[35mλ\x1b[0m \"\n:set prompt-cont \"\x1b[34mλ |\x1b[0m \"")

:def logoprompt (\_ -> return $ ":set prompt \"\x1b[35m\xe677\x1b[0m \"\n:set prompt-cont \"\x1b[34m\xe677 |\x1b[0m \"")

-- Default imports
:m + Control.Monad
:m + Data.List
:m + Data.List.Split
:m + Data.Monoid
:m + Data.String
:m + Data.Time

-- Default extensions
:set -XDerivingVia
:set -XFlexibleContexts
:set -XGeneralizedNewtypeDeriving
:set -XOverloadedStrings
:set -XStandaloneDeriving
:set -XTypeApplications

-- START HASKELL CODE
:{

-- Pretty print a number with commas
pp :: Show a => a -> IO ()
pp x = putStrLn $ h ++ t'
  where
  --n = Numeric.showFFloat ()
  sp = break (== '.') $ show x
  h = reverse (intercalate "," $ chunksOf 3 $ reverse $ fst sp)
  t' = snd sp

removeCRsFromFile :: FilePath -> IO ()
removeCRsFromFile file = do
  c <- readFile file
  length c `seq` writeFile file $ filter (/= '\r') c

takeWhileM :: Monad m => (a -> Bool) -> [m a] -> m [a]
takeWhileM p (ma : mas) = do
    a <- ma
    if p a
      then liftM (a :) $ takeWhileM p mas
      else return []
takeWhileM _ _ = return []

getLinesWhile :: (String -> Bool) -> IO String
getLinesWhile p = liftM unlines $ takeWhileM p (repeat getLine)

getLines :: IO String
getLines = getLinesWhile (/="\"\"\"")

-- Pretty printing with :cp and :ncp
-- pacman -S haskell-pretty-show haskell-hscolour
-- or
-- stack build pretty-show hscolour
colorPrint =
  System.IO.putStrLn
  . Language.Haskell.HsColour.hscolour
      Language.Haskell.HsColour.TTY
      Language.Haskell.HsColour.Colourise.defaultColourPrefs False False "" False
  . Text.Show.Pretty.ppShow

-------------------------------------------------
-- TimeLit stuff --------------------------------
-------------------------------------------------

newtype TimeLit = TimeLit { unTimeLit :: DiffTime }
  deriving (Num)

instance Show TimeLit where
  show x = show h ++ ":" ++ f02 m ++ ":" ++ f02 s
    where
    (h, m, s) = timeLitToTuple x
    f02 n = reverse $ take 2 $ reverse $ "0" ++ show n

instance IsString TimeLit where
  fromString = parseTimeLit

-- A sad way of converting DiffTime to seconds
diffTimeToSeconds :: DiffTime -> Int
diffTimeToSeconds dt = case reads @Int $ show dt of
  [(x, "s")] -> x
  _ -> error $ "Invalid Int from DiffTime: " ++ show dt

timeLitToTuple :: TimeLit -> (Int, Int, Int)
timeLitToTuple (TimeLit inp) =
  let initial   = diffTimeToSeconds inp
      (h, rest) = initial `divMod` 3600
      (m, s)    = rest    `divMod`   60
  in (h, m, s)

parseTimeLit :: String -> TimeLit
parseTimeLit inp = case Text.Parsec.parse p srcName inp of
  Right x -> x
  Left e -> error $ unlines
    [ "Failed to parse TimeLit: " ++ show inp
    , "Error: " ++ show e
    ]
  where
  srcName = ""
  integer = read @Integer <$> Text.Parsec.many1 Text.Parsec.digit
  colon = void $ Text.Parsec.char ':'
  (<?>) = (Text.Parsec.<?>)
  p = do
    h <- integer <?> "hour"
    _ <- colon <?> "colon after hour"
    m <- integer <?> "minute"
    when (m > 59) $ fail $ "Minute must be 0-59, got: " ++ show m
    _ <- colon <?> "colon after minute"
    s <- integer <?> "second"
    when (s > 59) $ fail $ "Second must be 0-59, got: " ++ show s
    Text.Parsec.eof
    pure $ fromInteger $ h * 3600 + m * 60 + s

-- h:mm:ss TimeLit
t :: String -> TimeLit
t = parseTimeLit

-- h:mm TimeLit
th :: String -> TimeLit
th = parseTimeLit . (++ ":0")

-- m:ss TimeLit
tm :: String -> TimeLit
tm = parseTimeLit . ("0:" ++)

-------------------------------------------------

-- Helper to do hour/minute time math
-- data HourMinTime = HourMinTime Int Int
--
-- h #: m
--   | abs h > 23 -> error $ "Invalid hour for HourMinTime: " ++ h
--   | m < 0 || m > 59 -> error $ "Invalid minute for HourMinTie: " ++ m
--   | otherwise = HourMinTime
--
-- instance Show HourMinTime where
--   show (HourMin h m) =
--     show h ++ ":" ++ (reverse $ take 2 $ reverse $ "0" ++ show m)
--
-- instance Num HourMinTime where
--   (HourMinTime h1 m1) + (HourMinTime h2 m2) =
--     HourMinTime (h + (m `div` 60) `mod` 24) (m `div` 60)
--     where
--     h = h1 + h2
--     m = m1 + m2
--
--   (HourMinTime h1 m1) - (HourMinTime h2 m2) =
--     HourMinTime (h + (m `div` 60) `mod` 24) (m `div` 60)
--     where
--     h = h1 + h2
--     m = m1 + m2
:}
-- END HASKELL CODE

-- Use cp/ncp to turn on/off color printing (off by default)
:def cp (\_ -> return ":set -interactive-print=colorPrint")
:def ncp (\_ -> return ":set -interactive-print=print")
